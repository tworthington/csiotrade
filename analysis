wordlist: analysis

analysis first

definitions

: tradereport
  0 ( tot)
  #cities times
    i thcity >name count type ."  Trade: " tab
    i thcity >trade @ 
    dup . ." (" dup i thcity >pop @ / . ."  per person)" tab ." via: "
    tradevol i thcity >sq @ v@ dup . ." ("  i thcity >pop @ / . ."  per person)"
    cr
    + 
  iterate ." Total trade: " .
;

: domainmap! ( city -- )
  costsofar cell+ over >domainmap @ count move
  -1 swap >domainvalid ! ;

\ : domainmap! drop ;

[[ cities
: reset-trade

  [[ vectors
  tradevol clear ]]
  citystats begin 
    next ?dup while
      0 over >trade !
  repeat
;

]]

: alltrade
  reset-trade
  #cities times
    i if
      i thcity >domainvalid @ 0= if
        i thcity >sq @ pixelpathAll
        i thcity domainmap!
      else
        i thcity >domainmap @ count costsofar cell+ swap move
      then
      i times
        i j <> if
          ." From " i thcity dup >name count type tab
          ." to " j thcity dup >name count type tab
          traderoute
          dup i j tradetable xy!
          dup j i tradetable xy!
          dup i thcity >trade +! j thcity >trade +!
        then
      iterate
    then
  iterate
;

[[ cities 
: onetrade ( city --)
  dup>r >sq @ pixelpathAll
  citystats
  begin (  prev |r: city)
    next ?dup while r@ (  next city )
      2dup <> if
        ." From " >name count type tab
          ." to " dup >name count type tab ( next )
        dup r@
        traderoute ( next vol)
        2dup swap >id @ r@ >id @ tradetable xy!
        2dup swap >id @ r@ >id @ swap tradetable xy!       
        dup r@ >trade +!
        over >trade +!
        else drop
      then
    repeat
    rdrop
;
]]

: .trade ( x y -- v ) xy>sq tradevol swap v@ . ;

variable scale

: calibrate ( vector -- )
  [[ vectors    
  maximum 2sqrt
  scale !
  ]]
;
  
: process ( vector -- )
    mapsquares 0 do
      dup i v@ dup if  2sqrt 255 scale @ */ 1 max
      then emit
    loop
    drop
;

: header
    ." P5 "
    width . height . 255 .
;

: startfile ( handle --)
    OUTPUT !
    header
;

: output ( handle vector -- )
    swap
    startfile
    process
;

: trademap
    tradevol calibrate
    tradepgm open>
    tradevol output
    close>
;

: days ( -- )
  mapsquares 0 do
    255
      costsofar i v@
      mapscale 1day / 1+
    /
    emit
  loop
;

: daysmap ( city )
  >sq @ pixelpathAll
  dayspgm open>
  startfile
  days
  close>
;

: domain ( city --  )
  dup
  >sq @ pixelpathAll ( city)
  domainmap!
;


: (fixup)
  #cities times
    i tradetable rowsum  i thcity >trade !
  iterate
;

\ s" some code to be performed for each city" domac
: domac ( caddr len -- ??? )
  2>r
  [[ cities  citystats ]] begin ( city )
    next ?dup while
      2r@ evaluate
  repeat
  2r> 2drop ;

\ readback the ci
: domainback ( city -- )
  dup >domainvalid @ if
    dup
    >domainmap @ count
    rot >name count s" .domainmap.bin" +suffix filedump
    else drop  then
;

: domainrestore ( city -- )
  dup>r
  >name count s" .domainmap.bin" +suffix
  r@ >domainmap @ ['] loadtable catch if 3 drops 0 else -1 then
  r> >domainvalid !
;

\ : domainrestore drop ;

[[ lists

: restore
  tradevolfile tradevol loadtable
  citytradefile tradetable loadxtable
  (fixup)
\  allcities ['] domainrestore foreach
;

: backup
  tradevol count tradevolfile filedump
  tradetable count dup * cells citytradefile filedump
  allcities ['] domainback foreach
;

]]

: domain? ( city -- )
  dup>r
  >domainvalid @ if rdrop else
                   r@ domainrestore r@ >domainvalid @
                   if rdrop else
                     r> domain
                   then then
;

mapsquares cells allocate constant (domainmap) 

: -domainmap (domainmap) count erase ;

-domainmap

: power@ ( city square -- val)
  over
  >domainmap @  ( city sq domainvec)
  swap v@ ( city distance)
  over >civ @ 1+  ( city distance civ)
  rot >pop @ ( dist civ pop) 1000 * \ pseudo-rounding
  rot 1 max
  */ 500 -
;

: stronger ( city0 city1 square -- city )
  >r 2dup
  r@ power@
  swap r> power@ ( city0 city1 power1 power0)
  2dup = if 2drop rnd rnd then \ pick a random city if tied
  > if nip else drop then
;

: strongest ( list n square -- city)
  over
  0 = if abort" Can't find strongest city in empty list!" then
  over 1 = if 2drop exit then
  swap 1-
  times ( list sq)
    dup>r
    stronger r>
  iterate
  drop 
;

[[ lists
\ map indiviual domains to the domain map
: domains ( citylist n -- )
  mapsquares 0 do ( list n )
    ldup 
    i strongest ( list n city)
    dup i power@ if
      >id  @ 1+
      (domainmap) i  v!
    else drop
    then
  loop
  drops
;

: domainmap ( citylist -- )
  ldup ['] domain? foreach
  domains
  domainpgm open>
  startfile
  (domainmap) count /cells times @+ swap emit iterate drop
  close> ;

]]

: globaltrademap
  [[ vectors
  tradevol clear
  tradetable clear
  ]]
  ns startns 2!
  alltrade trademap
  ns endns 2!
  startns 2@
  endns 2@
  ." Time: "  ns- .ns cr
;

: citytrademap ( city ) onetrade trademap ;

: main ( cityid -- ) thcity dup >name count type tab >id @ tradetable rowmax drop thcity >name count type ;

: rep #cities times i main cr iterate ;

\ city trade report
: ctrep ( city -- ) >id @ tradetable >row
  #cities 0 do @+ swap ?dup if i thcity  >name count type tab  . cr then loop drop ;

1 constant ctdecimals

ctdecimals 2 + 10^ constant tradeprec%

: (%%d.) <# ctdecimals times # iterate [char] . hold #s #> type space ;

: .%% ( tot val -- )
  s>d rot ( vh vl tot)
  tradeprec% swap m*/rem drop (%%d.)
;

: ctrep% ( city -- )
  >id @ tradetable 2dup rowsum
  -rot ( total id tab )
  >row ( total addr )
  #cities 0 do ( total addr)
    @+ ( total v addr2 )
    -rot ( addr tot v )
    over tradeprec% / over <
    if
      i thcity  >name count type tab
      2dup .%% cr
    then ( addr tot v)
    drop swap
  loop 2drop ;

: rep ( city )  dup .city ctrep% ;

: (city?)
  dup csio < if abort" Not a city" then ;

: ? ( sq city -- sq)
  (city?)
  over power@ .
;

: cost
  (city?)
  >domainmap @ over v@ ;

: cost? cost . ;

: time? cost
        1day /mod . ." days "
        1hr /mod . ." hrs "
        1hr 60 -rot */ . ." min" ;


: ta allcities domainmap  ;
: t2 cswe csio 2  domainmap ;
: t3 warwick cswe csio 3  domainmap ;

\ Pareto wealth: (families/totalfams)^((1.16-1)/1.16)*T
\ where 1.16 is the inequality. 1= no inequality
\ and T is total trade
\ (families/totalfams)^((1.16-1)/1.16)*T/families gives average wealth per family