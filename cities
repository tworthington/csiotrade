requires utils

wordlist: cities

get-current
cities first definitions

create (offset) 0 ,

: offset! ( x y -- ) xy>sq (offset) ! ;

: >sq, ( x y -- )
  xy>sq  (offset) @ + , ;


\ (link) (trade) x y pop name ( civ/lv race/class alignment ) city/cit

\ city: bier 978 1001 >sq, 170 , 3 , human , CG , ," Bier"
\ citystats 4 th >pop @ .


\ NN->anything = 1
\ L->N =1
\ G->N =1

9 enums: N LG NG CG CN CE NE LE LN

create aligntradetab
\ N    LG  NG   CG   CN   CE   NE   LE   LN
\ 85,100,  85 , 80 , 75 , 65 , 70 , 90 , 95 , \ Base
85 , 100 , 85 , 80 , 75 , 65 , 70 , 90 , 95 , \ N
70 , 100 , 85 , 65 , 50 , 30 , 35 , 75 , 95 , \ LG
85 , 100 , 85 , 80 , 60 , 50 , 55 , 75 , 80 , \ NG
70 ,  85 , 85 , 80 , 75 , 50 , 35 , 55 , 60 , \ CG
85 ,  85 , 70 , 80 , 75 , 65 , 55 , 75 , 80 , \ CN
70 ,  65 , 50 , 65 , 75 , 65 , 70 , 75 , 60 , \ CE
85 ,  85 , 70 , 65 , 60 , 65 , 70 , 90 , 80 , \ NE
70 ,  85 , 50 , 45 , 40 , 50 , 70 , 90 , 95 , \ LE
85 , 100 , 70 , 65 , 60 , 50 , 55 , 90 , 95 , \ LN

\ a1's opinion of a2
: align@ ( a1 a2 -- % )
  aligntradetab rot 9 * rot + cells+ @ ;

: aligntrade ( trade a1 a2 -- trade2)
  2dup align@ -rot align@ * 10000 */ ;
  
: techtrade ( trade t1 t2 -- trade2) + 1+ * ;

export{
12 enums:
dwarf elf gnome half-elf hobbit half-orc human
gnoll goblin ogre orc balrog
}export

: .race ( n -- )
  case
    dwarf r= of ." Dwarf" endof
    elf r= of ." Elf" endof
    gnome r= of ." Gnome" endof
    half-elf r= of ." Half Elven" endof
    hobbit r= of ." Hobbit" endof
    half-orc r= of ." Half Orc" endof
    human r= of ." Human" endof
    gnoll r= of ." Gnoll" endof
    goblin r= of ." Goblin" endof
    ogre r= of ." Ogre" endof
    orc r= of ." Orc" endof
    balrog r= of ." Balrog!" endof
    ." Unknown"
  endcase
;

100 constant p
95 constant g
86 constant t
71 constant n
55 constant a
32 constant h
10 constant f

create racetradetab
\ dw el gn  he  hb  ho  hu  gl  go  og  or  ba
p , a , g , n , g , h , n , h , h , h , h , f , \ dw dwarf
a , p , t , g , t , a , n , a , a , h , h , f , \ el elf
g , t , p , t , g , h , n , h , h , f , h , f , \ gn gnoll
n , p , t , p , n , a , t , a , a , h , h , f , \ he half-elf
g , g , t , n , p , n , n , f , h , f , f , f , \ hb hobbit
h , a , h , a , n , p , t , n , t , g , h , g , \ ho half orc
n , n , n , t , n , n , p , a , a , h , h , f , \ hu human
h , h , h , h , h , h , a , p , a , g , t , g , \ gl gnoll
h , a , h , a , h , t , a , a , p , h , n , g , \ go golin
f , f , h , f , a , t , t , t , a , p , t , n , \ og ogre
f , f , h , h , a , g , t , n , t , g , h , g , \ or orc
h , f , h , f , n , g , t , n , g , n , g , p , \ ba balrog

2 enums: settlement citadel

: race@ ( r1 r2 -- % ) racetradetab rot 12 * rot + cells+ @ ;

: racetrade ( trade r1 r2 -- trade2) 2dup race@ -rot race@ * 10000 */ ;

: .align
  case
    N r= of ." Neutral" endof
    LG r= of ." Lawful Good" endof
    NG r= of ." Neutral Good" endof
    CG r= of ." Chaotic Good" endof
    CN r= of ." Chaotic Neutral" endof
    CE r= of ." Chaotic Evil" endof
    NE r= of ." Neutral Evil" endof
    LE r= of ." Lawful Evil" endof
    LN r= of ." Lawful Neutral" endof
  endcase
;

\ head, count
create  citystats 0 , 0 ,

export{

: #cities ( list -- n ) cell+ @ ;

}export

: count++ ( citylist -- ) cell+ 1 swap +! ;

: overflow? ( n citylist -- n citylist)
  2dup
  #cities > if abort" City index out of range" then
;

: (city) ( <itemname> -- )
  create
  citystats
  here ( head* new*)
  over @ ( head* new* oldhead)
  , over ! \ link field
  0 ,  \ zero trade field
  mapsquares cells allocate ,  \ holder for domainmap
  dup #cities ,
  count++
;

: field ( offset size <name> -- offset2)
  create over ,
  +
does> ( base addr -- addr2)
  @ + ;

: cell:: cell field ;
: cells::
  cells  field
;

: alias:: ( field <name> )
  ' >pf @ @ 0 field drop ;

: {{ 0 ;
: }} drop ;

export{
{{
cell:: >link
cell:: >trade
cell:: >domainmap
cell:: >id
cell:: >type
cell:: >sq
cell:: >pop
cell:: >civ
cell:: >race
cell:: >alignment
2 cells:: >name

: >wealth@ dup >trade @ swap >pop @ / ;

}}

alias:: >civ >lv
alias:: >race >class

: next ( item -- item2 | 0) >link @ ;

: city: (city)   settlement , ;

: stronghold: (city) citadel , ;

: thcity ( n -- city_n)
  dup citystats #cities u< -if abort" Theres no such city, mate" then
  citystats @ ( n city0)
  begin
    2dup >id @ <> while
      next
  repeat
  nip
;

}export

: >city ( i base ) swap thcity ;

\ citystats foreach .city
: foreach ( base <name> -- ? )
  ' >r
  @ ?dup if  ( 0th )
    begin
      dup r@ execute
      next
    ?dup 0= until
  then
  rdrop
;

export{
: .city ( base)
  ?dup if
    dup>r
    >name count type cr
    tab ." id:" r@ >id @ . cr
    tab ." Population: " r@ >pop @ . cr
    tab ." Location: " r@ >sq @ . ."  ( " r@ >sq @ .xy ." )" cr
    tab ." Trade: " r@ >trade @ dup . cr
    tab ." Wealth " r@ >pop @  / . cr
    tab ." Civilisation: " r@ >civ @ . cr
    tab ." Race: " r@ >race @ .race cr
    tab ." Align: " r> >alignment @ .align cr
  else
    ." Null city" cr
  then
;

: #cities citystats #cities ;

: filter: ( fieldxt testval <name> --  )
   create , ,
does> ( city this -- city| )
  over swap
  2@ >r execute @
  r> <> if drop then
;

' >race goblin filter: isgoblin
' >race human filter: ishuman

: allcities
  depth >r
  #cities times i thcity iterate
  depth r> - 
;

: racecities ( race)
  depth >r
  #cities times ( race )
    i thcity 2dup >race @ <> if drop else swap then
  iterate
  depth r> - nip
;



}export

previous set-current
