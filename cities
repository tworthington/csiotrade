requires utils

wordlist: cities

get-current
cities first definitions
\ (link) (trade) x y pop name ( civ/lv race/class alignment ) city/cit

\ city: bier 978 1001 >sq, 170 , 3 , human , CG , ," Bier"
\ citystats 4 th >pop @ .


\ NN->anything = 1
\ L->N =1
\ G->N =1

9 enums: N LG NG CG CN CE NE LE LN

create aligntradetab
\ N    LG  NG   CG   CN   CE   NE   LE   LN
\ 85,100,  85 , 80 , 75 , 65 , 70 , 90 , 95 , \ Base
85 , 100 , 85 , 80 , 75 , 65 , 70 , 90 , 95 , \ N
70 , 100 , 85 , 65 , 50 , 30 , 35 , 75 , 95 , \ LG
85 , 100 , 85 , 80 , 60 , 50 , 55 , 75 , 80 , \ NG
70 ,  85 , 85 , 80 , 75 , 50 , 35 , 55 , 60 , \ CG
85 ,  85 , 70 , 80 , 75 , 65 , 55 , 75 , 80 , \ CN
70 ,  65 , 50 , 65 , 75 , 65 , 70 , 75 , 60 , \ CE
85 ,  85 , 70 , 65 , 60 , 65 , 70 , 90 , 80 , \ NE
70 ,  85 , 50 , 45 , 40 , 50 , 70 , 90 , 95 , \ LE
85 , 100 , 70 , 65 , 60 , 50 , 55 , 90 , 95 , \ LN

\ a1's opinion of a2
: align@ ( a1 a2 -- % )
  aligntradetab rot 9 * rot + cells+ @ ;

: aligntrade ( trade a1 a2 -- trade2)
  2dup align@ -rot align@ * 10000 */ ;
  
: techtrade ( trade t1 t2 -- trade2) + 1+ * ;

12 enums:
dwarf elf gnome half-elf hobbit half-orc human
gnoll goblin orc  balrog ogre 

100 constant P
90 constant G
75 constant T
50 constant N
30 constant A
5 constant H
0 constant F


create racetradetab
\ dw el gn  he  hb  ho  hu  gl  go  or  ba  og
P , A , G , N , G , H , N , H , H , H , F , F , \ dw
A , P , T , G , T , A , N , A , A , H , H , H , \ el
G , T , P , T , G , H , N , H , H , H , F , F , \ gn


2 enums: settlement citadel

: .race ( n -- )
  case
    r@ human = of ." Human" endof
    r@ elf = of ." Elf" endof
    r@ hobbit = of ." Hobbit" endof
    r@ dwarf = of ." Dwarf" endof
  endcase
;

: .align
  case
    r@ N = of ." Neutral" endof
    r@ LG = of ." Lawful Good" endof
    r@ NG = of ." Neutral Good" endof
    r@ CG = of ." Chaotic Good" endof
    r@ CN = of ." Chaotic Neutral" endof
    r@ CE = of ." Chaotic Evil" endof
    r@ NE = of ." Neutral Evil" endof
    r@ LE = of ." Lawful Evil" endof
    r@ LN = of ." Lawful Neutral" endof
  endcase
;

\ head, count
create  citystats 0 , 0 ,

export{

: #cities ( list -- n ) cell+ @ ;

}export

: count++ ( citylist -- ) cell+ 1 swap +! ;

: overflow? ( n citylist -- n citylist)
  2dup
  #cities > if abort" City index out of range" then
;

: (city) ( <itemname> -- )
  create
  citystats
  here ( head* new*)
  over @ ( head* new* oldhead)
  , over ! \ link field
  0 ,  \ zero trade field
  count++
;

export{
: city: (city)   settlement , ;

: stronghold: (city) citadel , ;

: thcity ( n -- city_n)
  citystats @ swap
  times
    @ iterate ;

}export

: 0th citystats @ ;
: 1st 1 thcity ;
: 2nd 2 thcity ;
: 3rd 3 thcity ;

: >city ( i base ) swap thcity ;

: field ( offset size <name> -- offset2)
  create over ,
  +
does> ( base addr -- addr2)
  @ + ;

: cell:: cell field ;
: cells::
  cells  field
;

: alias:: ( field <name> )
  ' >pf @ @ 0 field drop ;

: {{ 0 ;
: }} drop ;

export{
{{
cell:: >link
cell:: >trade
cell:: >type
cell:: >sq
cell:: >pop
cell:: >civ
cell:: >race
cell:: >alignment
2 cells:: >name
}}

alias:: >civ >lv
alias:: >race >class


: next ( item -- item2 | 0) >link @ ;

\ citystats foreach .city
: foreach ( base <name> -- ? )
  ' >r
  @ ?dup if  ( 0th )
    begin
      dup r@ execute
      next
    ?dup 0= until
  then
  rdrop
;

: .city ( base)
  dup>r
  >name count type cr
  tab ." Population: " r@ >pop @ . cr
  tab ." Location: " r@ >sq @ . ."  ( " r@ >sq @ .xy ." )" cr
  tab ." Trade:" r@ >trade @ . cr
  tab ." Civilisation: " r@ >civ @ . cr
  tab ." Race: " r@ >race @ .race cr
  tab ." Align: " r> >alignment @ .align cr
;

: #cities citystats #cities ;

}export

previous set-current