wordlist: utils

: ]+
  ] lit
  postpone +
; immediate

: ]*
  ] lit
  postpone *
; immediate


: ]# ] lit ; immediate

1 cells constant cell

: xorshift ( n -- n2 )
  dup 13 lshift xor
  dup 17 rshift xor
  dup  5 lshift xor ;


variable (rnd)     \ seed
2463534242 (rnd) ! \ initialize seed

: rnd ( -- n )
   (rnd) @ xorshift dup (rnd) ! ;

: turb ( x sq -- x+0-10%)
  xorshift abs 11 mod 100 + 100 */
;

: $delimit
  char parse   ( caddr len)
;

: [$delimit]
  $delimit   state @ if postpone 2literal then ; immediate

: 10^ ( x -- 10^x) 1 swap 0 do 10 * loop ;

variable (case)
: case postpone >r 0 (case) ! ; immediate
: endcase
  (case) @ times postpone then iterate
  postpone rdrop
  0 (case) !
; immediate
: of 1 (case) +! postpone if ; immediate
: endof postpone else ; immediate

: digression ( <word> <char>file<char> -- )
  bl word find nip
  $delimit     ( flag caddr len)
  rot if  2drop  else  included  then
;

: (linerr)
    dup 0 < if dup abs 1000 < if
            throw then then
;

: (allocate) ( size -- addr)
    >r
    0 -1 34 3 r> 0 6 192 linux 
    (linerr)
;

: allocate ( size -- addr)
    dup cell+ (allocate) ( size addr)
    tuck !
;

: free ( addr -- )
  dup @ swap 2 91 linux throw ;

: mem  ( size <name> -- addr)
    create
    allocate
    ,
  does> @ count
;

: bigrs ( xt size -- ??? )
    rsp@ swap ( xt oldrsp size )
    dup allocate + cell-  ( xt oldrsp newrsp)
    rsp!
    >r
    execute
    r> rsp!
;

: /string ( caddr len cut)
  2dup < if drop dup then
  dup >r -
  swap r> +
  swap ;

: $>s ( d caddr len -- d2 caddr2 len2)
  over c@ [char] - = if 1 /string >number 2drop negate else
    >number 2drop then d>s
;

: (2constant) ( addr -- a b ) 2@ ;

: 2constant ( a b <name> -- ) create , , does> (2constant) ;

: $@ 2@ ;
: $! ( caddr len addr -- ) tuck ! ! ;

: ," ( <string>" -- )
  [char] " parse ( caddr len)
  align
  dup ,
  here over cell+ allot
  swap zmove
;

: u.s depth times i pick u. iterate ;

16 constant rowlength
: .##  s>d <# # # #> type ;
: .dword s>d <# # # # # # # # # #> type ;

: spaces times space iterate ;

: tab 9 emit ;

: .row ( addr -- )   dup .dword space
 dup rowlength + swap 
 do
   i 4 mod -if space  then 
   i c@ .## space   
  loop ;

\ is n >=l and <=h ?
: limit? ( l n h ) over <  -rot  >  or not ;

: .asciirow ( addr -- ) 
  dup rowlength + swap do  
  33 i c@ 127  limit? if  i c@  else 46 then
  emit loop ;

: dump ( start rows -- )
    base @ >r hex
    rowlength * over + swap do i .row space i .asciirow cr rowlength +loop cr
    u.s cr
    r> base !
; 

: ? dup 2 dump ;

: 2variable
    create 0 , 0 ,
;
    
: under+ ( a b c -- a+c b)
    rot + swap ;

: export{ get-order 2 pick set-current drops ;

: }export definitions ;

: global{ forth-wid set-current ;

: }global definitions ;

\ [[ squares
\ blah blah blah
\ ]]

: [[ ( <wordlist> -- ) ' execute first ; immediate
: ]] previous ; immediate

: dups times dup iterate ;

: diff - abs ;

: ." postpone s" postpone type ; immediate

: ," postpone s" ( caddr cnt)
    dup ,
    here over allot
    swap move
    align
;

: enums: 0 do  i constant  loop ;

\ a must be â‰¤ b
: between? ( n a b -- flag)
    -rot ( b n a )
    over > not ( b n f1)
    -rot
    < not and
;

\ unsigned version
: ubetween? ( n a b -- flag)
    -rot ( b n a )
    over u> not ( b n f1)
    -rot
    u< not and
;

: abort -1 throw ;

: (abort") ( caddr len -- ) type cr -2 throw ;

: abort"
    postpone s"
    state @ if 
        postpone (abort")
    else
        (abort")
    then
; immediate

: ?break
    key 27 = if abort" Break" then
;   

15 user constant OUTPUT
15 user constant INPUT

\ open out
: open> ( caddr len -- handle)
  2dup type cr
  drop 438 swap 2 8 linux
  dup 0= throw
;

: <read ( addr len1 hdl -- len2)
  14 user @ >r
  14 user ! accept
  r> 14 user ! ;

\ open for read-only
: <open ( caddr len -- handle)
  0 0 2swap open ;

\ read/write
: <open> ( caddr len -- handle)
  3 0 2swap open ;

: <open" [char] " parse <open ;

: fsize ( hdle -- size)
    here swap 2 108 linux throw \ fstat
    here 20 + @
;

\ close output
: close>
  OUTPUT @
  close
  1 OUTPUT ! ;

: redirect ( xt caddr len -- ?)
  open> OUTPUT !
  execute
  close>
;

\ do xt with STDOUT redirected to filename
: redirect" ( xt <filename>" -- ? )
  OUTPUT @ >r  \ save output handle
  [char] " parse
  redirect
  r> OUTPUT ! ;

: filedump ( caddr len filename len -- )
  ['] type -rot redirect ;

: save ( caddr len caddr len -- ) ['] type -rot redirect ;

: saveas" ( caddr len <filename>" ) [char] " parse save ;


: savetable" ( tabaddr -- ) @+ swap dup * cells saveas" ;

: (loadtable) ( filename len table^ size -- )
  2swap <open dup>r <read drop r> close ;

\ assumes table has a count cell holding cells
: loadcelltable ( filename len table -- )
  count cells (loadtable) ;

\ assumes table has a count cell holding one of 2 axis as a cell count
: loadxtable count dup * cells (loadtable) ;

\ assumes table has a count cell holding bytes
: loadtable ( filename len table -- )
  count (loadtable)
;

: loadtable" ( tab-addr -- ) count dup * cells <open" dup>r <read
  1 < if abort" Table read failed" then r> close throw  ;

\ nanoseconds
: ns  here 0 2 265 linux throw here 2@ swap ;

: ns- ( ns1 ns2 -- ns)  ( sec1 ns1 sec2 ns2 -- sec3 ns3)
    >r ( sec1 ns1 sec2 )
    rot - ( ns1 sec3)
    r> rot -
;

: us>d ( n -- 0 nl)
    0 swap
;

: .0r ( n w -- )
    swap us>d rot <#
    times
        #
    iterate
    #s
    #> type ;

: .ns ( sec nanosec -- )
    swap 0 .0r [char] . emit
    8 .0r space
;

1 cells constant 1cell
2 cells constant 2cell

: /cells 1cell / ;

1488522236 constant inv_log2

8 constant p
1 p lshift constant 1<<p
2 p lshift constant 2<<p
1 p 1- lshift constant b1

: rshift dup 31 > if 2drop 0 else rshift then ;

: drshift ( nh nl s -- xh xl)
  tuck rshift ( nh s xla)
  >r
  1 over lshift 1- ( nh s mask |: xla )
  2 pick and ( nh s clipped | xla )
  >r
  tuck rshift ( s xh | xla clipped)
  32 rot - ( xh s2 | xla clipped)
  r> swap lshift r> or
;

: fixy ( x y -- x' y')
  begin
    over 2<<p < not while
    1<<p + swap 1 rshift
  repeat
;

\ z=x
: fixz ( z y -- )
  swap ( y z )
  b1
  p times
    ( y z b)
    >r
    dup m* p drshift d>s ( y z'|b)
    dup 2<<p  ( y z' z 2p')
    < not if 1 rshift swap r@ + swap then
    r> 1 rshift
    iterate
    2drop
;

: fixx ( x -- x' y')
  0 ( x y )
  begin
    over 1<<p < while
    1<<p - swap 2* swap
  repeat
;

: log2fix ( x -- x)
  p lshift
  fixx (  x' y')
  fixy ( x' y )
  fixz ( y)
;

\ 8 bits of precision
: logfix ( x  -- log2n)
  log2fix inv_log2 m*
  31 drshift
;

: t 1024 logfix ;

: .s u.s ;
